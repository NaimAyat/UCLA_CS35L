Naim Ayat
CS 35L Assignment 9
Laboratory: Change Management
June 3, 2017


1.) I obtained a copy of the Diffutils repository in Git format:
	git clone https://git.savannah.gnu.org/git/diffutils.git


2.) After entering the Diffutils directory with
	cd diffutils
    I generated a log of changes to Diffutils' master branch and put it into the file
    git-log.txt with the command
	git log > git-log.txt


3.) Similarly, I generated a list of tags for Diffutils and put it into the file
    git-tags.txt with the command
	git tag > git-tags.txt


4.) I opened git-log.txt in Emacs with
	emacs git-log.txt
    And did a search (C-s) for the quote “maint: quote 'like this' or "like this", not `like this'”.

    To generate the patch, I copied its commit ID for the following command:
	git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout > quote-patch.txt


5.) I ran the command
	git checkout v3.0
    And observed the following output:
    __________________________________________________________________________________

    Note: checking out 'v3.0'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by performing another checkout.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -b with the checkout command again. Example:

      git checkout -b new_branch_name

    HEAD is now at 022cd5c... version 3.0
    __________________________________________________________________________________


6.) I applied the patch with the command
	patch -p1 < quote-patch.txt
    There were three cases in which it was unable to find files to patch; I simply
    skipped over these cases with RETURN.

    After running, the patch generated the following output of successes/failures:
    __________________________________________________________________________________

    Hunk #1 succeeded at 36 with fuzz 1.
    Hunk #4 succeeded at 185 (offset -6 lines).
    Hunk #5 succeeded at 231 (offset -6 lines).
    Hunk #6 succeeded at 257 (offset -6 lines).
    Hunk #7 succeeded at 269 (offset -6 lines).
    Hunk #8 succeeded at 364 (offset -6 lines).
    Hunk #9 succeeded at 377 (offset -6 lines).
    patching file src/context.c
    Hunk #1 succeeded at 159 (offset 1 line).
    Hunk #2 succeeded at 289 (offset 1 line).
    Hunk #3 succeeded at 393 with fuzz 2 (offset 1 line).
    Hunk #4 succeeded at 431 (offset 1 line).
    Hunk #5 succeeded at 459 (offset 1 line).
    patching file src/diff.c
    Hunk #1 succeeded at 40 with fuzz 2 (offset -2 lines).
    Hunk #2 succeeded at 57 (offset -2 lines).
    Hunk #3 succeeded at 92 (offset -2 lines).
    Hunk #4 succeeded at 330 (offset -10 lines).
    Hunk #5 succeeded at 505 (offset -10 lines).
    Hunk #6 succeeded at 534 (offset -10 lines).
    Hunk #7 succeeded at 585 (offset -14 lines).
    Hunk #8 succeeded at 744 (offset -14 lines).
    Hunk #9 succeeded at 826 (offset -14 lines).
    Hunk #10 FAILED at 876.
    Hunk #11 FAILED at 906.
    Hunk #12 FAILED at 942.
    Hunk #13 succeeded at 960 with fuzz 2 (offset -29 lines).
    Hunk #14 succeeded at 1159 with fuzz 2 (offset -32 lines).
    3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej
    patching file src/diff.h
    Hunk #2 succeeded at 126 with fuzz 2 (offset -13 lines).
    Hunk #3 succeeded at 202 (offset -13 lines).
    patching file src/diff3.c
    Hunk #1 succeeded at 35 (offset 1 line).
    Hunk #2 succeeded at 159 (offset 1 line).
    Hunk #3 succeeded at 316 (offset 1 line).
    Hunk #4 succeeded at 351 (offset 1 line).
    Hunk #5 succeeded at 412 (offset 1 line).
    Hunk #6 FAILED at 433.
    Hunk #7 succeeded at 460 with fuzz 2 (offset -18 lines).
    Hunk #8 succeeded at 1275 (offset -18 lines).
    Hunk #9 succeeded at 1475 (offset -18 lines).
    1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej
    patching file src/dir.c
    Hunk #1 succeeded at 84 (offset -1 lines).
    Hunk #2 succeeded at 125 (offset -1 lines).
    Hunk #3 succeeded at 154 (offset -1 lines).
    Hunk #4 succeeded at 234 (offset -1 lines).
    patching file src/ifdef.c
    patching file src/io.c
    patching file src/sdiff.c
    Hunk #2 succeeded at 92 (offset 1 line).
    Hunk #3 succeeded at 175 (offset 23 lines).
    Hunk #4 succeeded at 230 (offset 17 lines).
    Hunk #5 succeeded at 286 (offset 17 lines).
    Hunk #6 succeeded at 572 (offset 13 lines).
    Hunk #7 succeeded at 747 (offset 41 lines).
    patching file src/side.c
    patching file src/system.h
    Hunk #2 succeeded at 105 (offset 6 lines).
    patching file src/util.c
    Hunk #4 succeeded at 190 with fuzz 2.
    Hunk #8 succeeded at 650 (offset -27 lines).
    patching file tests/help-version
    Hunk #1 succeeded at 75 (offset 1 line).
    Hunk #2 succeeded at 85 (offset 1 line).
    Hunk #3 succeeded at 96 (offset 1 line).
    Hunk #4 succeeded at 108 (offset 1 line).
    Hunk #5 succeeded at 140 (offset 1 line).
    Hunk #6 succeeded at 188 (offset 1 line).
    __________________________________________________________________________________


7.) I used the command
	git status
    To check which files the patch did and did not modify. The output was:
    __________________________________________________________________________________

    # HEAD detached at v3.0
    # Changes not staged for commit:
    #   (use "git add <file>..." to update what will be committed)
    #   (use "git checkout -- <file>..." to discard changes in working directory)
    #
    #       modified:   NEWS
    #       modified:   README
    #       modified:   TODO
    #       modified:   doc/diagmeet.note
    #       modified:   ms/config.bat
    #       modified:   ms/config.site
    #       modified:   po/en.po
    #       modified:   src/analyze.c
    #       modified:   src/cmp.c
    #       modified:   src/context.c
    #       modified:   src/diff.c
    #       modified:   src/diff.h
    #       modified:   src/diff3.c
    #       modified:   src/dir.c
    #       modified:   src/ifdef.c
    #       modified:   src/io.c
    #       modified:   src/sdiff.c
    #       modified:   src/side.c
    #       modified:   src/system.h
    #       modified:   src/util.c
    #       modified:   tests/help-version
    #
    # Untracked files:
    #   (use "git add <file>..." to include in what will be committed)
    #
    #       NEWS.orig
    #       README-hacking.orig
    #       README-hacking.rej
    #       README.orig
    #       README.rej
    #       ad
    #       cfg.mk.orig
    #       cfg.mk.rej
    #       git-log.txt
    #       git-tags.txt
    #       ms/config.site.orig
    #       quote-patch.txt
    #       src/cmp.c.orig
    #       src/context.c.orig
    #       src/diff.c.orig
    #       src/diff.c.rej
    #       src/diff.h.orig
    #       src/diff3.c.orig
    #       src/diff3.c.rej
    #       src/dir.c.orig
    #       src/sdiff.c.orig
    #       src/system.h.orig
    #       src/util.c.orig
    #       tests/help-version.orig
    __________________________________________________________________________________


8.) I discovered that files can be compared to previous versions with vc-diff (C-x v =)
    and reverted with vc-revert (C-x v u). Hunks can be reverted with  diff-apply-hunk 
    (C-c C-a) and their source file/line can be found with diff-goto-source (C-c C-c).


9.) To revert changes to files other than .c files, I used vc-revert on NEWS, README, 
    TODO, doc/diagmeet.note, ms/config.bat, ms/config.site, po/en.po, src/diff.h, 
    src/system.h, and tests/help-version.

    For .c files, I used vc-diff to compare each file to its previous version. I found
    all instances where comments were modified, visited them with diff-goto-source, and
    reverted them.


10.) I visited src/diff3.c.rej and src/diff.c.rej, observing where changes were rejected.
     Essentially, I had to replace occurences of ` with '.


11.) I removed all unnecessary untracked files with
	git clean -n
	git clean -f


12.) To create the new patch, I ran
	git diff > quote-3.0-patch.txt
     Also, 
	git diff | wc
     Returns that the patch contains 388 lines, which is in line with the spec.


13.) To build the modified version of Diffutils, I ran
	./bootstrap
	./configure
	make
	make check
     To test it, I ran
	diff . -
	diff --help
     The output produces apostrophes instead of ` characters, so the patch worked.


14.) I created a new directory and put the old version of diffutils inside it.
     Then, I used my patched diff to compare the source code of the old diffutils
     to the source code of my modified version. 


15.) By using diff to compare the contents of the old diffutils to my new version,
     I observed some innocuous differences in the files relating to apostrophes and
     ` characters, which was expected.